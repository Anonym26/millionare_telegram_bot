from aiogram import types

from app.keyboards.create_buttons_answers import create_buttons
from app.utility.get_questions import get_question
from app.utility.show_correct_answer import show_correct_answer
from app.utility.winning_amount import winning_amount
from config import apikey
from main import dp, bot

users = {
    'user_id_score': 'count_question',
    'user_id_balance': 'balance',
    'user_id_hints': ['50/50', 'help_people'],
    'user_id_question': ('question', ['answers'])
}
win_sum = [100, 500, 1000, 5000, 10000, 50000, 100000, 200000, 300000, 500000, 600000, 700000, 800000, 9000000,
           10000000]


@dp.callback_query_handler(text='start_quiz')
async def send_nest_question(call: types.CallbackQuery):
    """–ò—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é get_question –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω"""
    await call.message.delete_reply_markup()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    user_id = str(call.from_user.id)
    question = users.setdefault(user_id + '_score', 1)
    users.update({user_id + '_hints': ['50/50', 'help_people']})
    next_question = get_question(question, apikey)
    users.update({user_id + '_question': next_question})

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = create_buttons(next_question)
    keyboard.add(*list(buttons))

    await bot.send_message(chat_id=call.from_user.id, text=f'–í–æ–ø—Ä–æ—Å ‚Ññ {question}\n\n{next_question[0]}',
                           reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='correct_answer')
async def send_next_question(call: types.CallbackQuery):
    """–ò—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é get_question –ø–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω"""
    await call.message.delete_reply_markup()

    user_id = str(call.from_user.id)
    question = int(users.get(user_id + '_score', 0))
    balance = users.setdefault(user_id + '_balance', win_sum[0])
    if question <= 14:
        await call.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {balance} —Ä—É–±–ª–µ–π!', show_alert=True)
        users[user_id + '_balance'] = win_sum[question]
        users[user_id + '_score'] += 1

        next_question = get_question(question, apikey)
        users.update({user_id + '_question': next_question})

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = create_buttons(next_question)
        keyboard.add(*list(buttons))

        await bot.send_message(chat_id=call.from_user.id, text=f'–í–æ–ø—Ä–æ—Å ‚Ññ {question + 1}\n\n{next_question[0]}',
                               reply_markup=keyboard)
    elif question == 15:
        await call.answer(text='–£—Ä–∞, –ø–æ–±–µ–¥–∞!\n –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 1 –º–∏–ª–ª–∏–æ–Ω —Ä—É–±–ª–µ–π!\nü•≥', show_alert=True)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.answer()


@dp.callback_query_handler(text='incorrect_answer')
async def finish(call: types.CallbackQuery):
    """–ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–π–≥—Ä—ã—à–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∏ –≤—ã–π–≥—Ä–∞–Ω–Ω–æ–π —Å—É–º–º–µ"""
    user_id = str(call.from_user.id)
    balance = users.setdefault(user_id + '_balance', 0)
    result = dict(call.message['reply_markup'])
    list_answer = result['inline_keyboard'][0] + result['inline_keyboard'][1]
    await call.answer(text=f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(\n'
                           f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {show_correct_answer(list_answer)}\n '
                           f'–í–∞—à –≤—ã–π–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª {winning_amount(balance)} —Ä—É–±–ª–µ–π.', show_alert=True)

    await call.message.delete_reply_markup()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.answer()
